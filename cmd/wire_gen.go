// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/yiran15/api-server/base/app"
	"github.com/yiran15/api-server/base/data"
	"github.com/yiran15/api-server/base/middleware"
	"github.com/yiran15/api-server/base/router"
	"github.com/yiran15/api-server/base/server"
	"github.com/yiran15/api-server/controller"
	"github.com/yiran15/api-server/pkg/casbin"
	"github.com/yiran15/api-server/pkg/jwt"
	"github.com/yiran15/api-server/service"
	"github.com/yiran15/api-server/store"
)

// Injectors from wire.go:

func InitApplication() (*app.Application, func(), error) {
	db, cleanup, err := data.NewDB()
	if err != nil {
		return nil, nil, err
	}
	dbProvider := store.NewDBProvider(db)
	userStorer := store.NewUserStore(dbProvider)
	userServicer := service.NewUserService(userStorer)
	userController := controller.NewUserController(userServicer)
	generateToken, err := jwt.NewGenerateToken()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	enforcer, err := casbin.NewEnforcer(db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authChecker := casbin.NewAuthChecker(enforcer)
	middlewareMiddleware := middleware.NewMiddleware(generateToken, authChecker)
	routerRouter := router.NewRouter(userController, middlewareMiddleware)
	engine := server.NewHttpServer(routerRouter)
	application := app.NewApplication(engine)
	return application, func() {
		cleanup()
	}, nil
}
